using UnityEngine;
using UnityEditor.Experimental.AssetImporters;
using SimpleJSON;
using System.IO;
using System;
using UnityEditor;

namespace CastleDBImporter {

    /// <summary>
    /// Class for impprting the image database generated by CastleDB's Image type functionality.
    /// </summary>
    [ScriptedImporter(2, "img")]
    public class CastleDBImageImporter : ScriptedImporter
    {
        JSONNode data = null;
        public override void OnImportAsset(AssetImportContext ctx)
        {
            // Make sure this .img file is part of a CastleDB database
            if (!HasCorrespondingCDBFile(ctx.assetPath)) { return; }

            // Make Images Folder
            CastleDBGenerator.InitPath(CastleDBConfig.Instance().ImagesFolder);

            // Import as TextAsset
            TextAsset images = new TextAsset(File.ReadAllText(ctx.assetPath));
            ctx.AddObjectToAsset("main obj", images);
            ctx.SetMainObject(images);

            // Decode and import images as assets
            data = JSON.Parse(images.text);
            EditorApplication.delayCall += new EditorApplication.CallbackFunction(WriteImages);

        }

        // Write images to specified unity image directory. 
        public void WriteImages()
        {
            foreach (var img in data)
            {
                string meta = img.Value.ToString().Split(',')[0];
                string data = img.Value.ToString().Split(',')[1];
                data = data.Trim('"');

                // Make sure our base64 string is padded
                switch (data.Length % 4)
                {
                    case 2: data += "=="; break;
                    case 3: data += "="; break;
                    default:
                        break;
                }

                byte[] imgbytes = Convert.FromBase64String(data);

                // Write file
                File.WriteAllBytes(Application.dataPath + "/" + CastleDBConfig.Instance().ImagesFolder + "/" + img.Key + "." + GetFileExtension(meta), imgbytes);

                data = null;
            }
        }

        // We use this to make sure we have a CDB file with our img file, otherwise it may not be a CastleDB img file.
        public bool HasCorrespondingCDBFile(string assetpath)
        {
            assetpath.Replace(".img", ".cdb");
            return File.Exists(assetpath);
        }

        // Get file extension from MIME type
        public string GetFileExtension(string meta)
        {
            meta = meta.ToUpper();
            if (meta.Contains("PNG")) { return "png"; }
            if (meta.Contains("JPEG")) { return "jpeg"; }
            if (meta.Contains("JPG")) { return "jpg"; }
            if (meta.Contains("GIF")) { return "gif"; }

            throw new System.Exception("Unsupported image meta found : '" + meta + "'");
        }
    }
}